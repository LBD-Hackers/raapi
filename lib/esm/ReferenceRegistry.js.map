{"version":3,"file":"ReferenceRegistry.js","names":["ReferenceRegistry","constructor","session","url","parent","fetch","accessService","AccessService","dataService","DataService","queryEngine","QueryEngine","create","makePublic","root","getRoot","datasetUrl","v4","metadata","Catalog","predicate","RDF","type","object","CONSOLID","addDistribution","addDataset","writeFileToPod","Buffer","from","createConcept","concept","query","ReferenceCollection","update","registerAggregatedConcept","aggregatedConcept","aggregates","createReference","reference","document","identifier","conformance","id","now","Date","DCTERMS","created","deleteReference","deleteConcept","console","log","orphanConcept","findConceptByIdentifier","activeDocument","selectedElement","engine","endpoints","aggregateSparqlEndpoints","obj","references","aliases","Set","included","checked","sat","q","alias","DCAT","dataset","distribution","accessURL","results","queryBindings","sources","satellite","bindings","toArray","b","get","value","includes","has","push","meta","add","sparql","getSatelliteFromLdpResource","aliasB","Array","sparqlUpdate"],"sources":["../../src/ReferenceRegistry.ts"],"sourcesContent":["import {AccessService, DataService, Catalog, getRoot, getSatelliteFromLdpResource} from 'consolid-daapi'\r\nimport { QueryEngine } from '@comunica/query-sparql'\r\nimport { ACL, DCAT, DCTERMS, FOAF, RDFS, LDP, RDF } from \"@inrupt/vocab-common-rdf\";\r\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\r\nimport { Session as NodeSession } from \"@inrupt/solid-client-authn-node\";\r\nimport {v4} from 'uuid'\r\nimport Fetch from 'cross-fetch'\r\nimport CONSOLID from 'consolid-vocabulary';\r\n\r\ninterface info {\r\n  webId: string,\r\n  isLoggedIn: boolean\r\n}\r\ninterface TokenSession {\r\n  fetch: typeof Fetch,\r\n  info: info\r\n}\r\n\r\nexport default class ReferenceRegistry {\r\n  public fetch;\r\n  public accessService: AccessService;\r\n  public dataService: DataService;\r\n  public projectId: string;\r\n  public url: string;\r\n  public datasetUrl: string;\r\n  public session: BrowserSession | NodeSession | TokenSession\r\n  public parent: Catalog;\r\n  public queryEngine: any\r\n\r\n  constructor(session: BrowserSession | NodeSession | TokenSession, url: string, parent?: Catalog) {\r\n    this.session = session\r\n    this.fetch = session.fetch;\r\n    this.url = url\r\n    this.accessService = new AccessService(session.fetch);\r\n    this.dataService = new DataService(session.fetch);\r\n    this.queryEngine = new QueryEngine()\r\n    if (parent) {\r\n      this.parent = parent\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description create this dataset within the active project\r\n   * @param makePublic initial access rights for the dataset (boolean)\r\n   */\r\n  public async create(parent: Catalog, makePublic: boolean = true): Promise<void> {\r\n    const root = getRoot(this.url)\r\n    this.datasetUrl = root + v4()\r\n    this.parent = parent\r\n    const metadata = new Catalog(this.session, this.datasetUrl)\r\n    await metadata.create(makePublic, [{predicate: RDF.type, object: CONSOLID.ReferenceRegistry}])\r\n    await metadata.addDistribution(this.url)\r\n    await parent.addDataset(this.datasetUrl)\r\n    await metadata.dataService.writeFileToPod(Buffer.from(''), this.url, makePublic, \"text/turtle\")\r\n  }\r\n\r\n  // public async aggregate(concept) {\r\n  //   const satellite = await getSatelliteFromLdpResource(this.url, this.queryEngine)\r\n\r\n  //   const query = `PREFIX dcat: <http://www.w3.org/ns/dcat#>\r\n  //   PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n  //   PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n  //   SELECT ?ref ?document ?ds ?value WHERE {\r\n  //       <${concept}> <${CONSOLID.aggregates}> ?ref .\r\n  //       OPTIONAL {\r\n  //         ?ref <${CONSOLID.hasIdentifier}> ?id .\r\n  //         ?id <${CONSOLID.inDocument}> ?document ;\r\n  //           rdf:value ?value .\r\n  //         ?ds dcat:distribution/dcat:accessURL ?document .\r\n  //     }\r\n  //   }`\r\n  //   const checked:any = new Set()\r\n  //   const all:any = new Set()\r\n    \r\n  //   const sources: any = await this.aggregateSparqlEndpoints()\r\n  //   const data = await this.queryEngine.queryBindings(query, {sources, session: this.session})\r\n  //   const bindings = await data.toArray().then(async (i) => {\r\n  //     for (const v of i) {\r\n  //     if (!v.get('id').value) { // the reference is external => an aggregated concept\r\n  //       const externalReference = v.get('ref').value\r\n  //       if (!checked.has(externalReference)) {\r\n  //         const sat = await getSatelliteFromLdpResource(externalReference)\r\n  //         const data = await this.queryEngine.queryBindings(query, {sources, session: this.session})\r\n  //         checked.add(externalReference)\r\n  //       }\r\n  //     } else {\r\n  //     }\r\n  //   }})\r\n  //   // const satellites = new Set()\r\n\r\n  //   // for (const ds of bindings) {\r\n  //   //   const sat = await getSatelliteFromLdpResource(ds, this.queryEngine)\r\n  //   //   all.add(ds)\r\n  //   //   satellites.add(sat)\r\n  //   // }\r\n    \r\n  //   // const s = Array.from(satellites)\r\n  //   // const d = await this.queryEngine.queryBindings(query, {sources: s, session: this.session})\r\n  //   // const localDatasets = await d.toArray().then(i => i.map(v => v.get('ds').value))\r\n  //   // localDatasets.forEach(ds => all.add(ds))\r\n\r\n  //   // return Array.from(all)\r\n  // }\r\n\r\n  // public async findConceptByIdentifier(identifier, document) {\r\n\r\n  // }\r\n\r\n  public async createConcept(concept = this.url + \"#\" + v4()) {\r\n    let query = `INSERT DATA {\r\n      <${concept}> a <${CONSOLID.ReferenceCollection}> .\r\n    }`\r\n    await this.update(query)\r\n    return concept\r\n  }\r\n\r\n  public async registerAggregatedConcept(concept, aggregatedConcept) {\r\n    let query = `INSERT DATA {\r\n      <${concept}> <${CONSOLID.aggregates}> <${aggregatedConcept}> .\r\n    }`\r\n    await this.update(query)\r\n  }\r\n\r\n  public async createReference(concept, reference= getRoot(this.url) + v4(), document, identifier, conformance) {\r\n    const id = getRoot(this.url) + v4() \r\n\r\n    const now = new Date()\r\n\r\n    let query = `\r\n    PREFIX oa: <http://www.w3.org/ns/oa#>\r\n    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n    PREFIX dct: <http://purl.org/dc/terms/>\r\n    INSERT DATA {\r\n      <${concept}> <${CONSOLID.aggregates}> <${reference}> .\r\n      <${reference}> <${DCTERMS.created}> \"${now}\";\r\n        oa:hasSelector <${id}> ;\r\n        oa:hasSource <${document}> .\r\n      <${id}> rdf:value \"${identifier}\" ;\r\n        dct:conformsTo \"${conformance}\" .\r\n    }`\r\n   \r\n    await this.update(query)\r\n    return reference\r\n  }\r\n\r\n  public async deleteReference(reference) {\r\n    const query = `DELETE WHERE {\r\n    ?concept <${CONSOLID.aggregates}> <${reference}> .\r\n      <${reference}> ?p ?o .\r\n      ?o ?predicate ?object .\r\n  }`\r\n    await this.update(query)\r\n  }\r\n\r\n  public async deleteConcept(concept) {\r\n    console.log('concept', concept)\r\n    const query = `DELETE WHERE {\r\n    <${concept}> a <${CONSOLID.ReferenceCollection}> .\r\n      ?concept ?b ?c .\r\n      ?c ?p ?o .\r\n      ?o ?predicate ?object .\r\n}`\r\n    await this.update(query)\r\n\r\n    const orphanConcept = `DELETE WHERE {\r\n      <${concept}> a <${CONSOLID.ReferenceCollection}> .\r\n    }`\r\n      await this.update(orphanConcept)\r\n  }\r\n\r\n  public async findConceptByIdentifier(activeDocument, selectedElement) {\r\n    const engine = this.queryEngine\r\n    const endpoints = await this.parent.aggregateSparqlEndpoints()\r\n\r\n    // find which of the satellites has a matching concept, and find its aggregations\r\n    const obj:any = {references: []}\r\n    const aliases:any = new Set()\r\n    const included = new Set()\r\n    const checked = new Set()\r\n    for (const sat of endpoints) {\r\n        const q = `\r\n        PREFIX oa: <http://www.w3.org/ns/oa#>\r\n        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n        SELECT * WHERE {\r\n            <${sat.alias}> <${DCAT.dataset}> ?ds .\r\n            ?ds a <${CONSOLID.ReferenceRegistry}> ;\r\n            <${DCAT.distribution}>/<${DCAT.accessURL}> ?ref .\r\n                ?concept a <${CONSOLID.ReferenceCollection}> ;\r\n                    <${CONSOLID.aggregates}> ?reference, ?aggr .\r\n                ?reference oa:hasSelector ?id ;\r\n                  oa:hasSource <${activeDocument}> .\r\n                ?id rdf:value \"${selectedElement}\".\r\n            ?meta <${DCAT.distribution}>/<${DCAT.accessURL}> <${activeDocument}> .\r\n        }`\r\n        const results = await engine.queryBindings(q, { sources: [sat.satellite] })\r\n        const bindings = await results.toArray()\r\n        for (const b of bindings) {\r\n            if (!b.get('concept').value.includes('?graph')) {\r\n              if (!included.has(b.get('reference').value)) {\r\n                obj.references.push({\r\n                  document: activeDocument,\r\n                  identifier: selectedElement,\r\n                  meta: b.get('meta').value,\r\n                  reference: b.get('reference').value\r\n              })\r\n              included.add(b.get('reference').value)\r\n\r\n            }\r\n\r\n                checked.add(b.get('concept').value)\r\n                aliases.add(b.get('aggr') && b.get('aggr').value)\r\n            }\r\n        }\r\n    }\r\n\r\n    for (const alias of aliases) {\r\n        const sparql = await getSatelliteFromLdpResource(alias)\r\n        const q = `\r\n        PREFIX oa: <http://www.w3.org/ns/oa#>\r\n        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n        SELECT * WHERE {\r\n            <${alias}> a <${CONSOLID.ReferenceCollection}> ;\r\n                    <${CONSOLID.aggregates}> ?reference .\r\n                ?reference oa:hasSelector ?id ;\r\n                  oa:hasSource ?doc;\r\n                ?id rdf:value ?identifier.\r\n                \r\n            ?meta <${DCAT.distribution}>/<${DCAT.accessURL}> ?doc .\r\n        }`\r\n        const results = await engine.queryBindings(q, { sources: [sparql] })\r\n        const aliasB = await results.toArray()\r\n        for (const b of aliasB) {\r\n          if (!included.has(b.get('reference').value))\r\n                obj.references.push({\r\n                    document: b.get('doc').value,\r\n                    identifier: b.get('identifier').value,\r\n                    meta: b.get('meta').value,\r\n                    reference: b.get('reference').value\r\n                })\r\n                included.add(b.get('reference').value)\r\n                checked.add(alias)\r\n        }\r\n    }\r\n\r\n    obj.aliases = Array.from(checked)\r\n    return obj\r\n\r\n  }\r\n\r\n  /**\r\n   * @description Update the dataset with SPARQL (dangerous - watch out!)\r\n   * @param query The SPARQL query with which to update the dataset\r\n   */\r\n  public async update(query) {\r\n    await this.dataService.sparqlUpdate(this.url, query)\r\n  }\r\n}\r\n\r\n"],"mappings":"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"}